#-------------------------------------------------------------------------------
model {
## Priors for survival rate components
# Priors for age*sex (cohort) component
for(s in 1:nspecies){
	for(i in 1:(nyrs-1)){
		muH.am[s,i] ~ dnorm(0,0.444)
		muN.am[s,i] ~ dnorm(0,0.444)
		muH.af[s,i] ~ dnorm(0,0.444)
		muN.af[s,i] ~ dnorm(0,0.444)
		muH.jm[s,i] ~ dnorm(0,0.444)
		muN.jm[s,i] ~ dnorm(0,0.444)
		muH.jf[s,i] ~ dnorm(0,0.444)
		muN.jf[s,i] ~ dnorm(0,0.444)
	}
	# Priors for recovery rates
	for(i in 1:nyrs){
		f.am[s,i] ~ dbeta(1,1)
		f.af[s,i] ~ dbeta(1,1)
		f.jm[s,i] ~ dbeta(1,1)
		f.jf[s,i] ~ dbeta(1,1)
	}
}


# Create species-, cohort-, and year-specific survival probabilities
for(s in 1:nspecies){
	for(i in 1:(nyrs-1)){
		logit(SH.am[s,i]) <- muH.am[s,i] #+ eyr[i]
		logit(SN.am[s,i]) <- muN.am[s,i] #+ eyr[i]
		logit(SH.af[s,i]) <- muH.af[s,i] #+ eyr[i]
		logit(SN.af[s,i]) <- muN.af[s,i] #+ eyr[i]
		logit(SH.jm[s,i]) <- muH.jm[s,i] #+ eyr[i]
		logit(SN.jm[s,i]) <- muN.jm[s,i] #+ eyr[i] 
		logit(SH.jf[s,i]) <- muH.jf[s,i] #+ eyr[i]
		logit(SN.jf[s,i]) <- muN.jf[s,i] #+ eyr[i]
	}
}

##### PRE-SEASON BANDED BIRDS
	##### Cell Probabilities: Adult Preseason- Banded Birds
		# Diagonals
for(s in 1:nspecies){
		for(i in 1:(nyrs-1)){
			recoveries.am[s,i,i] <- f.am[s,i]
			recoveries.af[s,i,i] <- f.af[s,i]
			for(j in (i+1):nyrs){
				recoveries.am[s,i,j] <- f.am[s,j]*prod(SH.am[s,i:(j-1)])*prod(SN.am[s,i:(j-1)])
				recoveries.af[s,i,j] <- f.af[s,j]*prod(SH.af[s,i:(j-1)])*prod(SN.af[s,i:(j-1)])
				recoveries.am[s,j,i] <- 0
				recoveries.af[s,j,i] <- 0
			}
		}
		recoveries.am[s,nyrs,nyrs] <- f.am[s,nyrs]
		recoveries.af[s,nyrs,nyrs] <- f.af[s,nyrs]
		# Not recovered
		for(i in 1:nyrs){
			recoveries.am[s,i,(nyrs+1)] <- 1 - sum(recoveries.am[s,i,1:nyrs])
			recoveries.af[s,i,(nyrs+1)] <- 1 - sum(recoveries.af[s,i,1:nyrs])
		}

	##### Likelihood
		for(i in 1:nyrs){
			recovmat.am[s,i,1:(nyrs+1)] ~ dmulti(recoveries.am[s,i,1:(nyrs+1)], relmat.am[s,i])
			recovmat.af[s,i,1:(nyrs+1)] ~ dmulti(recoveries.af[s,i,1:(nyrs+1)], relmat.af[s,i])
		}

	#-----------------------------------------------------------------------------------
	##### Cell Probabilities: Juvenile Preseason- Banded Birds
		# Diagonals
		for(i in 1:nyrs){
			recoveries.jm[s,i,i] <- f.jm[s,i]
			recoveries.jf[s,i,i] <- f.jf[s,i]
		}
		# First off diagonal
		for(i in 1:(nyrs-1)){
			recoveries.jm[s,i,(i+1)] <- f.am[s,(i+1)]*SH.jm[s,i]*SN.jm[s,i]
			recoveries.jf[s,i,(i+1)] <- f.af[s,(i+1)]*SH.jf[s,i]*SN.jf[s,i]
		}
		# Rest
		for(i in 1:(nyrs-2)){
			for(j in (i+2):nyrs){
				recoveries.jm[s,i,j] <- f.am[s,j]*SH.jm[s,i]*SN.jm[s,i]*prod(SH.am[s,(i+1):(j-1)])*prod(SN.am[s,(i+1):(j-1)])
				recoveries.jf[s,i,j] <- f.af[s,j]*SH.jf[s,i]*SN.jf[s,i]*prod(SH.af[s,(i+1):(j-1)])*prod(SN.af[s,(i+1):(j-1)])
			}
		}
		# Lower triangular is all zeros
		for(i in 1:(nyrs-1)){
			for(j in (i+1):nyrs){
				recoveries.jm[s,j,i] <- 0
				recoveries.jf[s,j,i] <- 0
			}
		}
		# Not recovered
		for(i in 1:nyrs){
			recoveries.jm[s,i,(nyrs+1)] <- 1 - sum(recoveries.jm[s,i,1:nyrs])
			recoveries.jf[s,i,(nyrs+1)] <- 1 - sum(recoveries.jf[s,i,1:nyrs])
		}

	##### Likelihood
		for(i in 1:nyrs){
			recovmat.jm[s,i,1:(nyrs+1)] ~ dmulti(recoveries.jm[s,i,1:(nyrs+1)], relmat.jm[s,i])
			recovmat.jf[s,i,1:(nyrs+1)] ~ dmulti(recoveries.jf[s,i,1:(nyrs+1)], relmat.jf[s,i])
		}

##### POST-SEASON BANDED BIRDS
	##### Cell Probabilities
		# Diagonals
		for(i in 1:(nyrs-2)){
			recoveriesP.am[s,i,i] <- f.am[s,(i+1)]*SN.am[s,i]
			recoveriesP.af[s,i,i] <- f.af[s,(i+1)]*SN.af[s,i]
			for(j in (i+1):(nyrs-1)){
				recoveriesP.am[s,i,j] <- f.am[s,(j+1)]*prod(SN.am[s,i:j])*prod(SH.am[s,(i+1):j])
				recoveriesP.af[s,i,j] <- f.af[s,(j+1)]*prod(SN.af[s,i:j])*prod(SH.af[s,(i+1):j])
				recoveriesP.am[s,j,i] <- 0
				recoveriesP.af[s,j,i] <- 0
			}
		}
		recoveriesP.am[s,(nyrs-1),(nyrs-1)] <- f.am[s,nyrs]*SN.am[s,(nyrs-1)]
		recoveriesP.af[s,(nyrs-1),(nyrs-1)] <- f.af[s,nyrs]*SN.af[s,(nyrs-1)]

		# Not recovered
		for(i in 1:(nyrs-1)){
			recoveriesP.am[s,i,(nyrs)] <- 1 - sum(recoveriesP.am[s,i,1:(nyrs-1)])
			recoveriesP.af[s,i,(nyrs)] <- 1 - sum(recoveriesP.af[s,i,1:(nyrs-1)])
		}

	##### Likelihood
		for(i in 1:(nyrs-1)){
			recovmatP.am[s,i,1:nyrs] ~ dmulti(recoveriesP.am[s,i,1:nyrs], relmatP.am[s,i])
			recovmatP.af[s,i,1:nyrs] ~ dmulti(recoveriesP.af[s,i,1:nyrs], relmatP.af[s,i])
		}
	#-----------------------------------------------------------------------------------
	##### Cell Probabilities: Juvenile Postseason- Banded Birds
		# Diagonals
		for(i in 1:(nyrs-1)){
			recoveriesP.jm[s,i,i] <- f.am[s,(i+1)]*SN.jm[s,i]
			recoveriesP.jf[s,i,i] <- f.af[s,(i+1)]*SN.jf[s,i]
		}
		# First off diagonal
		for(i in 1:(nyrs-2)){
			for(j in (i+1):(nyrs-1)){
				recoveriesP.jm[s,i,j] <- f.am[s,(j+1)]*SN.jm[s,i]*prod(SH.am[s,(i+1):j])*prod(SN.am[s,(i+1):j])
				recoveriesP.jf[s,i,j] <- f.af[s,(j+1)]*SN.jf[s,i]*prod(SH.af[s,(i+1):j])*prod(SN.af[s,(i+1):j])
				recoveriesP.jm[s,j,i] <- 0
				recoveriesP.jf[s,j,i] <- 0

			}
		}
		# Not recovered
		for(i in 1:(nyrs-1)){
			recoveriesP.jm[s,i,nyrs] <- 1 - sum(recoveriesP.jm[s,i,1:(nyrs-1)])
			recoveriesP.jf[s,i,nyrs] <- 1 - sum(recoveriesP.jf[s,i,1:(nyrs-1)])
		}

	##### Likelihood
		for(i in 1:(nyrs-1)){
			recovmatP.jm[s,i,1:nyrs] ~ dmulti(recoveriesP.jm[s,i,1:nyrs], relmatP.jm[s,i])
			recovmatP.jf[s,i,1:nyrs] ~ dmulti(recoveriesP.jf[s,i,1:nyrs], relmatP.jf[s,i])
		}
	#### ANNUAL SURVIVAL ESTIMATE
		for(i in 1:(nyrs-1)){
			S.am[s,i]<-SH.am[s,i] * SN.am[s,i]
			S.af[s,i]<-SH.af[s,i] * SN.af[s,i]
			S.jm[s,i]<-SH.jm[s,i] * SN.jm[s,i]
			S.jf[s,i]<-SH.jf[s,i] * SN.jf[s,i]
		}

	#### Bayesian p-value calculation
	## Simulated m-arrays - should be 8 of them
	# pre-season
	for(i in 1:nyrs){
		recovmat.sim.am[s,i,1:(nyrs+1)] ~ dmulti(recoveries.am[s,i,1:(nyrs+1)], relmat.am[s,i])
		recovmat.sim.af[s,i,1:(nyrs+1)] ~ dmulti(recoveries.af[s,i,1:(nyrs+1)], relmat.af[s,i])
		recovmat.sim.jm[s,i,1:(nyrs+1)] ~ dmulti(recoveries.jm[s,i,1:(nyrs+1)], relmat.jm[s,i])
		recovmat.sim.jf[s,i,1:(nyrs+1)] ~ dmulti(recoveries.jf[s,i,1:(nyrs+1)], relmat.jf[s,i])
		# calculate expected, and chi-square stat
		exp.am[s,i,1:(nyrs+1)] <- recoveries.am[s,i,1:(nyrs+1)]*relmat.am[s,i]
		exp.af[s,i,1:(nyrs+1)] <- recoveries.af[s,i,1:(nyrs+1)]*relmat.af[s,i]
		exp.jm[s,i,1:(nyrs+1)] <- recoveries.jm[s,i,1:(nyrs+1)]*relmat.jm[s,i]
		exp.jf[s,i,1:(nyrs+1)] <- recoveries.jf[s,i,1:(nyrs+1)]*relmat.jf[s,i]
		# fstat diagonals
		fstat.sim.am[s,i,i] <- ((exp.am[s,i,i]-recovmat.sim.am[s,i,i])^2)/(exp.am[s,i,i]+0.5)
		fstat.sim.af[s,i,i] <- ((exp.af[s,i,i]-recovmat.sim.af[s,i,i])^2)/(exp.af[s,i,i]+0.5)
		fstat.sim.jm[s,i,i] <- ((exp.jm[s,i,i]-recovmat.sim.jm[s,i,i])^2)/(exp.jm[s,i,i]+0.5)
		fstat.sim.jf[s,i,i] <- ((exp.jf[s,i,i]-recovmat.sim.jf[s,i,i])^2)/(exp.jf[s,i,i]+0.5)
		for(j in (i+1):nyrs){
		fstat.sim.am[s,i,j] <- ((exp.am[s,i,j]-recovmat.sim.am[s,i,j])^2)/(exp.am[s,i,j]+0.5)
		fstat.sim.af[s,i,j] <- ((exp.af[s,i,j]-recovmat.sim.af[s,i,j])^2)/(exp.af[s,i,j]+0.5)
		fstat.sim.jm[s,i,j] <- ((exp.jm[s,i,j]-recovmat.sim.jm[s,i,j])^2)/(exp.jm[s,i,j]+0.5)
		fstat.sim.jf[s,i,j] <- ((exp.jf[s,i,j]-recovmat.sim.jf[s,i,j])^2)/(exp.jf[s,i,j]+0.5)
		fstat.sim.am[s,j,i] <- 0 
		fstat.sim.af[s,j,i] <- 0
		fstat.sim.jm[s,j,i] <- 0
		fstat.sim.jf[s,j,i] <- 0
		}
	}

	# last column?
	fstat.sim.am[s,1:nyrs,(nyrs+1)] <- ((exp.am[s,1:nyrs,(nyrs+1)]-recovmat.sim.am[s,1:nyrs,(nyrs+1)])^2)/(exp.am[s,1:nyrs,(nyrs+1)]+0.5)
	fstat.sim.af[s,1:nyrs,(nyrs+1)] <- ((exp.af[s,1:nyrs,(nyrs+1)]-recovmat.sim.af[s,1:nyrs,(nyrs+1)])^2)/(exp.af[s,1:nyrs,(nyrs+1)]+0.5)
	fstat.sim.jm[s,1:nyrs,(nyrs+1)] <- ((exp.jm[s,1:nyrs,(nyrs+1)]-recovmat.sim.jm[s,1:nyrs,(nyrs+1)])^2)/(exp.jm[s,1:nyrs,(nyrs+1)]+0.5)
	fstat.sim.jf[s,1:nyrs,(nyrs+1)] <- ((exp.jf[s,1:nyrs,(nyrs+1)]-recovmat.sim.jf[s,1:nyrs,(nyrs+1)])^2)/(exp.jf[s,1:nyrs,(nyrs+1)]+0.5)

	# post-season
	for(i in 1:(nyrs-1)){
		recovmatP.sim.am[s,i,1:(nyrs)] ~ dmulti(recoveriesP.am[s,i,1:(nyrs)], relmatP.am[s,i])
		recovmatP.sim.af[s,i,1:(nyrs)] ~ dmulti(recoveriesP.af[s,i,1:(nyrs)], relmatP.af[s,i])
		recovmatP.sim.jm[s,i,1:(nyrs)] ~ dmulti(recoveriesP.jm[s,i,1:(nyrs)], relmatP.jm[s,i])
		recovmatP.sim.jf[s,i,1:(nyrs)] ~ dmulti(recoveriesP.jf[s,i,1:(nyrs)], relmatP.jf[s,i])
		# calculate expected, and chi-square stat
		expP.am[s,i,1:(nyrs)] <- recoveriesP.am[s,i,1:(nyrs)]*relmatP.am[s,i]
		expP.af[s,i,1:(nyrs)] <- recoveriesP.af[s,i,1:(nyrs)]*relmatP.af[s,i]
		expP.jm[s,i,1:(nyrs)] <- recoveriesP.jm[s,i,1:(nyrs)]*relmatP.jm[s,i]
		expP.jf[s,i,1:(nyrs)] <- recoveriesP.jf[s,i,1:(nyrs)]*relmatP.jf[s,i]
		# fstat diagonals
		fstatP.sim.am[s,i,i] <- ((expP.am[s,i,i]-recovmatP.sim.am[s,i,i])^2)/(expP.am[s,i,i]+0.5)
		fstatP.sim.af[s,i,i] <- ((expP.af[s,i,i]-recovmatP.sim.af[s,i,i])^2)/(expP.af[s,i,i]+0.5)
		fstatP.sim.jm[s,i,i] <- ((expP.jm[s,i,i]-recovmatP.sim.jm[s,i,i])^2)/(expP.jm[s,i,i]+0.5)
		fstatP.sim.jf[s,i,i] <- ((expP.jf[s,i,i]-recovmatP.sim.jf[s,i,i])^2)/(expP.jf[s,i,i]+0.5)
		for(j in (i+1):(nyrs-1)){
		fstatP.sim.am[s,i,j] <- ((expP.am[s,i,j]-recovmatP.sim.am[s,i,j])^2)/(expP.am[s,i,j]+0.5)
		fstatP.sim.af[s,i,j] <- ((expP.af[s,i,j]-recovmatP.sim.af[s,i,j])^2)/(expP.af[s,i,j]+0.5)
		fstatP.sim.jm[s,i,j] <- ((expP.jm[s,i,j]-recovmatP.sim.jm[s,i,j])^2)/(expP.jm[s,i,j]+0.5)
		fstatP.sim.jf[s,i,j] <- ((expP.jf[s,i,j]-recovmatP.sim.jf[s,i,j])^2)/(expP.jf[s,i,j]+0.5)
		fstatP.sim.am[s,j,i] <- 0 
		fstatP.sim.af[s,j,i] <- 0
		fstatP.sim.jm[s,j,i] <- 0
		fstatP.sim.jf[s,j,i] <- 0
		}
	}
	# last column?
	fstatP.sim.am[s,1:(nyrs-1),(nyrs)] <- ((expP.am[s,1:(nyrs-1),(nyrs)]-recovmatP.sim.am[s,1:(nyrs-1),(nyrs)])^2)/(expP.am[s,1:(nyrs-1),(nyrs)]+0.5)
	fstatP.sim.af[s,1:(nyrs-1),(nyrs)] <- ((expP.af[s,1:(nyrs-1),(nyrs)]-recovmatP.sim.af[s,1:(nyrs-1),(nyrs)])^2)/(expP.af[s,1:(nyrs-1),(nyrs)]+0.5)
	fstatP.sim.jm[s,1:(nyrs-1),(nyrs)] <- ((expP.jm[s,1:(nyrs-1),(nyrs)]-recovmatP.sim.jm[s,1:(nyrs-1),(nyrs)])^2)/(expP.jm[s,1:(nyrs-1),(nyrs)]+0.5)
	fstatP.sim.jf[s,1:(nyrs-1),(nyrs)] <- ((expP.jf[s,1:(nyrs-1),(nyrs)]-recovmatP.sim.jf[s,1:(nyrs-1),(nyrs)])^2)/(expP.jf[s,1:(nyrs-1),(nyrs)]+0.5)

	## Observed m-arrays
	# pre-season
	for(i in 1:nyrs){
		# fstat diagonals
		fstat.am[s,i,i] <- ((exp.am[s,i,i]-recovmat.am[s,i,i])^2)/(exp.am[s,i,i]+0.5)
		fstat.af[s,i,i] <- ((exp.af[s,i,i]-recovmat.af[s,i,i])^2)/(exp.af[s,i,i]+0.5)
		fstat.jm[s,i,i] <- ((exp.jm[s,i,i]-recovmat.jm[s,i,i])^2)/(exp.jm[s,i,i]+0.5)
		fstat.jf[s,i,i] <- ((exp.jf[s,i,i]-recovmat.jf[s,i,i])^2)/(exp.jf[s,i,i]+0.5)
		for(j in (i+1):nyrs){
		fstat.am[s,i,j] <- ((exp.am[s,i,j]-recovmat.am[s,i,j])^2)/(exp.am[s,i,j]+0.5)
		fstat.af[s,i,j] <- ((exp.af[s,i,j]-recovmat.af[s,i,j])^2)/(exp.af[s,i,j]+0.5)
		fstat.jm[s,i,j] <- ((exp.jm[s,i,j]-recovmat.jm[s,i,j])^2)/(exp.jm[s,i,j]+0.5)
		fstat.jf[s,i,j] <- ((exp.jf[s,i,j]-recovmat.jf[s,i,j])^2)/(exp.jf[s,i,j]+0.5)
		fstat.am[s,j,i] <- 0 
		fstat.af[s,j,i] <- 0
		fstat.jm[s,j,i] <- 0
		fstat.jf[s,j,i] <- 0
		}
	}	
	# last column?
	fstat.am[s,1:nyrs,(nyrs+1)] <- ((exp.am[s,1:nyrs,(nyrs+1)]-recovmat.am[s,1:nyrs,(nyrs+1)])^2)/(exp.am[s,1:nyrs,(nyrs+1)]+0.5)
	fstat.af[s,1:nyrs,(nyrs+1)] <- ((exp.af[s,1:nyrs,(nyrs+1)]-recovmat.af[s,1:nyrs,(nyrs+1)])^2)/(exp.af[s,1:nyrs,(nyrs+1)]+0.5)
	fstat.jm[s,1:nyrs,(nyrs+1)] <- ((exp.jm[s,1:nyrs,(nyrs+1)]-recovmat.jm[s,1:nyrs,(nyrs+1)])^2)/(exp.jm[s,1:nyrs,(nyrs+1)]+0.5)
	fstat.jf[s,1:nyrs,(nyrs+1)] <- ((exp.jf[s,1:nyrs,(nyrs+1)]-recovmat.jf[s,1:nyrs,(nyrs+1)])^2)/(exp.jf[s,1:nyrs,(nyrs+1)]+0.5)

	# post-season
	for(i in 1:(nyrs-1)){
		# fstat diagonals
		fstatP.am[s,i,i] <- ((expP.am[s,i,i]-recovmatP.am[s,i,i])^2)/(expP.am[s,i,i]+0.5)
		fstatP.af[s,i,i] <- ((expP.af[s,i,i]-recovmatP.af[s,i,i])^2)/(expP.af[s,i,i]+0.5)
		fstatP.jm[s,i,i] <- ((expP.jm[s,i,i]-recovmatP.jm[s,i,i])^2)/(expP.jm[s,i,i]+0.5)
		fstatP.jf[s,i,i] <- ((expP.jf[s,i,i]-recovmatP.jf[s,i,i])^2)/(expP.jf[s,i,i]+0.5)
		for(j in (i+1):(nyrs-1)){
		fstatP.am[s,i,j] <- ((expP.am[s,i,j]-recovmatP.am[s,i,j])^2)/(expP.am[s,i,j]+0.5)
		fstatP.af[s,i,j] <- ((expP.af[s,i,j]-recovmatP.af[s,i,j])^2)/(expP.af[s,i,j]+0.5)
		fstatP.jm[s,i,j] <- ((expP.jm[s,i,j]-recovmatP.jm[s,i,j])^2)/(expP.jm[s,i,j]+0.5)
		fstatP.jf[s,i,j] <- ((expP.jf[s,i,j]-recovmatP.jf[s,i,j])^2)/(expP.jf[s,i,j]+0.5)
		fstatP.am[s,j,i] <- 0 
		fstatP.af[s,j,i] <- 0
		fstatP.jm[s,j,i] <- 0
		fstatP.jf[s,j,i] <- 0
		}
	}
	# last column?
	fstatP.am[s,1:(nyrs-1),(nyrs)] <- ((expP.am[s,1:(nyrs-1),(nyrs)]-recovmatP.am[s,1:(nyrs-1),(nyrs)])^2)/(expP.am[s,1:(nyrs-1),(nyrs)]+0.5)
	fstatP.af[s,1:(nyrs-1),(nyrs)] <- ((expP.af[s,1:(nyrs-1),(nyrs)]-recovmatP.af[s,1:(nyrs-1),(nyrs)])^2)/(expP.af[s,1:(nyrs-1),(nyrs)]+0.5)
	fstatP.jm[s,1:(nyrs-1),(nyrs)] <- ((expP.jm[s,1:(nyrs-1),(nyrs)]-recovmatP.jm[s,1:(nyrs-1),(nyrs)])^2)/(expP.jm[s,1:(nyrs-1),(nyrs)]+0.5)
	fstatP.jf[s,1:(nyrs-1),(nyrs)] <- ((expP.jf[s,1:(nyrs-1),(nyrs)]-recovmatP.jf[s,1:(nyrs-1),(nyrs)])^2)/(expP.jf[s,1:(nyrs-1),(nyrs)]+0.5)

} # s for species

#### Total Bayesian p-value stat calculation
## Broken down by species
for(s in 1:nspecies){
fit.sim.stat[s,1,1,1] <- sum(fstat.sim.am[s,,])   # For AM the simulated fit statistic, pre-season cohort
fit.obs.stat[s,1,1,2] <-  sum(fstat.am[s,,])      # For AM the observed fit statistic, pre-season cohort
fit.sim.stat[s,1,2,1] <- sum(fstatP.sim.am[s,,])  # For AM, simulated fit statistic, post-season
fit.obs.stat[s,1,2,2] <-  sum(fstatP.am[s,,])     # For AM, observed fit statistic, post-season


fit.sim.stat[s,2,1,1] <- sum(fstat.sim.af[s,,])   # For AF
fit.obs.stat[s,2,1,2] <- sum(fstat.af[s,,])
fit.sim.stat[s,2,2,1] <- sum(fstatP.sim.af[s,,])
fit.obs.stat[s,2,2,2] <- sum(fstatP.af[s,,])


fit.sim.stat[s,3,1,1] <-  sum(fstat.sim.jm[s,,]) # For JM
fit.obs.stat[s,3,1,2] <-  sum(fstat.jm[s,,])  
fit.sim.stat[s,3,2,1] <-  sum(fstatP.sim.jm[s,,]) 
fit.obs.stat[s,3,2,2] <-  sum(fstatP.jm[s,,]) 

 

fit.sim.stat[s,4,1,1] <-  sum(fstat.sim.jf[s,,]) 
fit.obs.stat[s,4,1,2] <-  sum(fstat.jf[s,,])  
fit.sim.stat[s,4,2,1] <-  sum(fstatP.sim.jf[s,,])
fit.obs.stat[s,4,2,2] <-  sum(fstatP.jf[s,,]) 
 



###Tstat[s] <- total.sim.stat[s]-total.obs.stat[s]
}
#Tstat <- 3



}
