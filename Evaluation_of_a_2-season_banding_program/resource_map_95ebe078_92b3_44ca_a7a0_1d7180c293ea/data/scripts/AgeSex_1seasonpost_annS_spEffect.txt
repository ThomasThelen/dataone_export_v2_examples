#-------------------------------------------------------------------------------
model {
# Priors for hunting season survival rates
# Priors for hunting season survival rates
#for(i in 1:(nyrs-2)){
#	eyr[i] ~ dnorm(0,0.444)
#}



for(s in 1:nspecies){
	for(i in 1:(nyrs-2)){
		mu.am[s,i] ~ dnorm(0,0.444)
		mu.af[s,i] ~ dnorm(0,0.444)
		mu.jm[s,i] ~ dnorm(0,0.444)
		mu.jf[s,i] ~ dnorm(0,0.444)
	}
	# Priors for recovery rates
	for(i in 1:(nyrs-1)){
		f.am[s,i] ~ dbeta(1,1)
		f.af[s,i] ~ dbeta(1,1)
		f.jm[s,i] ~ dbeta(1,1)
		f.jf[s,i] ~ dbeta(1,1)
	}
}


# Create species-, cohort-, and year-specific survival probabilities
for(s in 1:nspecies){
	for(i in 1:(nyrs-2)){
		logit(S.am[s,i]) <- mu.am[s,i] #+ eyr[i]
		logit(S.af[s,i]) <- mu.af[s,i] #+ eyr[i] 
		logit(S.jm[s,i]) <- mu.am[s,i] #+ eyr[i] 
		logit(S.jf[s,i]) <- mu.af[s,i] #+ eyr[i]  
	}
}

##### POST-SEASON BANDED BIRDS
	##### Cell Probabilities
		# Diagonals
	for(s in 1:nspecies){
		for(i in 1:(nyrs-2)){
			recoveriesP.am[s,i,i] <- f.am[s,(i)]
			recoveriesP.af[s,i,i] <- f.af[s,(i)]
			for(j in (i+1):(nyrs-1)){
				recoveriesP.am[s,i,j] <- f.am[s,(j)]*prod(S.am[s,i:(j-1)])
				recoveriesP.af[s,i,j] <- f.af[s,(j)]*prod(S.af[s,i:(j-1)])
				recoveriesP.am[s,j,i] <- 0
				recoveriesP.af[s,j,i] <- 0
			}
		}
		recoveriesP.am[s,(nyrs-1),(nyrs-1)] <- f.am[s,(nyrs-1)]
		recoveriesP.af[s,(nyrs-1),(nyrs-1)] <- f.af[s,(nyrs-1)]

		# Not recovered
		for(i in 1:(nyrs-1)){
			recoveriesP.am[s,i,(nyrs)] <- 1 - sum(recoveriesP.am[s,i,1:(nyrs-1)])
			recoveriesP.af[s,i,(nyrs)] <- 1 - sum(recoveriesP.af[s,i,1:(nyrs-1)])
		}

	##### Likelihood
		for(i in 1:(nyrs-1)){
			recovmatP.am[s,i,1:nyrs] ~ dmulti(recoveriesP.am[s,i,1:nyrs], relmatP.am[s,i])
			recovmatP.af[s,i,1:nyrs] ~ dmulti(recoveriesP.af[s,i,1:nyrs], relmatP.af[s,i])
		}
	#-----------------------------------------------------------------------------------
	##### Cell Probabilities: Juvenile Postseason- Banded Birds
		# Diagonals
		for(i in 1:(nyrs-1)){
			recoveriesP.jm[s,i,i] <- f.am[s,(i)]
			recoveriesP.jf[s,i,i] <- f.af[s,(i)]
		}
		# First off diagonal
		for(i in 1:(nyrs-3)){
			# j = i+1 case
			recoveriesP.jm[s,i,(i+1)] <- f.am[s,(i+1)]*S.jm[s,i]
			recoveriesP.jf[s,i,(i+1)] <- f.af[s,(i+1)]*S.jf[s,i]
			recoveriesP.jm[s,(i+1),i] <- 0
			recoveriesP.jf[s,(i+1),i] <- 0

			for(j in (i+2):(nyrs-1)){
				recoveriesP.jm[s,i,j] <- f.am[s,(j)]*S.jm[s,i]*prod(S.am[s,(i+1):(j-1)])
				recoveriesP.jf[s,i,j] <- f.af[s,(j)]*S.jf[s,i]*prod(S.af[s,(i+1):(j-1)])
				recoveriesP.jm[s,j,i] <- 0
				recoveriesP.jf[s,j,i] <- 0

			}
		}
		# i=nyrs-2 case
		recoveriesP.jm[s,(nyrs-2),(nyrs-1)] <- f.am[s,(nyrs-1)]*S.jm[s,(nyrs-2)]
		recoveriesP.jf[s,(nyrs-2),(nyrs-1)] <- f.af[s,(nyrs-1)]*S.jf[s,(nyrs-2)]
		recoveriesP.jm[s,(nyrs-1),(nyrs-2)] <- 0
		recoveriesP.jf[s,(nyrs-1),(nyrs-2)] <- 0
	
		# Not recovered
		for(i in 1:(nyrs-1)){
			recoveriesP.jm[s,i,nyrs] <- 1 - sum(recoveriesP.jm[s,i,1:(nyrs-1)])
			recoveriesP.jf[s,i,nyrs] <- 1 - sum(recoveriesP.jf[s,i,1:(nyrs-1)])
		}

	##### Likelihood
		for(i in 1:(nyrs-1)){
			recovmatP.jm[s,i,1:nyrs] ~ dmulti(recoveriesP.jm[s,i,1:nyrs], relmatP.jm[s,i])
			recovmatP.jf[s,i,1:nyrs] ~ dmulti(recoveriesP.jf[s,i,1:nyrs], relmatP.jf[s,i])
		}
}
}
